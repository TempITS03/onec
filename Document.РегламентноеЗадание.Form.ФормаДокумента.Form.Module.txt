&НаКлиенте
Перем мОрганизация, мКонтрагент;

&НаСервере
//Процедура получает срез регистра сведений по шкале ставок и подставляет данные в документ
//
Процедура СрезШкалыСтавокСотрудников() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШкалаТарифовСрезПоследних.ВидРасчета,
	|	ШкалаТарифовСрезПоследних.ВалютаРасчета,
	|	ШкалаТарифовСрезПоследних.ЦенаЧасаСумма,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.ШкалаТарифов.СрезПоследних(
	|			&ДатаСреза,
	|			Сотрудник = &Сотрудник
	|				И Организация = &Организация) КАК ШкалаТарифовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, ) КАК КурсыВалютСрезПоследних
	|		ПО ШкалаТарифовСрезПоследних.ВалютаРасчета = КурсыВалютСрезПоследних.Валюта");
	
	ДатаСреза = ?(Объект.Дата = '00010101',КонецДня(ТекущаяДата()),КонецДня(Объект.Дата));
	
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
	Запрос.УстановитьПараметр("ДатаСреза",ДатаСреза);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Объект.ВидРасчета = Шапка.ВидРасчета;
	Объект.ВалютаДокумента = Шапка.ВалютаРасчета;
	Объект.Курс		= Шапка.Курс;
	Объект.Кратность= Шапка.Кратность;
	Объект.ЦенаЧаса = Шапка.ЦенаЧасаСумма;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПараметрыОпций = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	
	Объект.ВалютаВзаиморасчетов 	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыОрганизации(Объект.Организация,"ОсновнаяВалютаВзаиморасчетов");
	Объект.КурсВзаиморасчетов		= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КурсВзаиморасчетов");
	Объект.КратностьВзаиморасчетов	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КратностьВзаиморасчетов");
	
	Если Не ПустаяСтрока(Объект.Номер) Тогда
		Объект.Номер = "";
	КонецЕсли;
	
	СрезШкалыСтавокСотрудников();
	ПересчетСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	СрезШкалыСтавокСотрудников();
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммыДокумента() 
	
	Объект.СуммаДокумента = 0;
	
	Если Объект.ВидРасчета = Перечисления.ВидРасчета.Оклад Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.СуммаДокумента = Объект.КоличествоЧасовЗатрачено * Объект.ЦенаЧаса;
	
КонецПроцедуры	

&НаКлиенте
Процедура КоличествоЧасовЗатраченоПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОкладТарифПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаЧасаПриИзменении(Элемент)
	ПересчетСуммыДокумента();
КонецПроцедуры

&НаСервере
Процедура ВызватьОбработкуКалькуляторВремени()
	
	ФормаКалькулятораВремени = Обработки.КалькуляторВремени.Создать();
	ФормаКалькулятораВремени.КвоМинут = Объект.КоличествоЧасовЗатрачено*60;
	ФормаКалькулятораВремени.КвоЧасов = Объект.КоличествоЧасовЗатрачено;
	
КонецПроцедуры	

&НаКлиенте
Процедура КоличествоЧасовЗатраченоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВремени = Новый Структура("КвоМинут",Объект.КоличествоЧасовЗатрачено*60);
	Результат = ОткрытьФормуМодально("Обработка.КалькуляторВремени.Форма",ПараметрыВремени);
	
	Если НЕ Результат = Неопределено Тогда
		Объект.КоличествоЧасовЗатрачено = Результат;
	КонецЕсли;	
	
	ПересчетСуммыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПометкаОбязательныхПолей()
	
	ЭтаФорма.Элементы.КоличествоЧасовЗатрачено.АвтоОтметкаНезаполненного = ?(Объект.Состояние = Перечисления.СостояниеЗаданий.Завершено,Истина,Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	ПометкаОбязательныхПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПометкаОбязательныхПолей();
	ОпределитьДоступностиЭлементов();
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностиЭлементов()
	
	Если (Объект.Состояние = Перечисления.СостояниеЗаданий.Завершено) и (Объект.Проведен) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
		Элементы.ОбъектыОбслуживания.ПодчиненныеЭлементы.ДеревоПодразделений.КоманднаяПанель.ПодчиненныеЭлементы.ЗаполнитьОбъектыОбслуживания.Доступность = Ложь;
	КонецЕсли;	

	//ТекущийПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	//Если (ТекущийПользователь <> Объект.Куратор.Пользователь) и (НЕ Объект.Куратор.Пустая()) и (Объект.Проведен) Тогда
	//	Элементы.ОбъектыОбслуживания.ТолькоПросмотр = Истина;
	//	Элементы.ОбъектыОбслуживания.ПодчиненныеЭлементы.ДеревоПодразделений.КоманднаяПанель.ПодчиненныеЭлементы.ЗаполнитьОбъектыОбслуживания.Доступность = Ложь;
	//КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ПроверкаПравНаДокумент(Отказ);
	
	Если Объект.Ссылка.Пустая() и Объект.Организация.Пустая() Тогда
		
		Объект.Организация = ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновнуюОрганизациюПоТекущемуПользователю();
		
		Объект.ВалютаВзаиморасчетов 	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыОрганизации(Объект.Организация,"ОсновнаяВалютаВзаиморасчетов");
		Объект.КурсВзаиморасчетов		= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КурсВзаиморасчетов");
		Объект.КратностьВзаиморасчетов	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КратностьВзаиморасчетов");
		
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.Контрагент 	= ТекущийПользователь.Контрагент;
		Объект.Куратор 		= ТекущийПользователь.ОсновнойКуратор;
		Объект.Сотрудник 	= ТекущийПользователь.ОсновнойИсполнитель;
		
		СрезШкалыСтавокСотрудников();
		ПересчетСуммыДокумента();
		
		Если РольДоступна("Клиент") и Не Объект.Интернет Тогда
			Объект.Интернет = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Параметры.Ключ.Пустая() Тогда 	
		
		ПараметрыОпций = Новый Структура("Организация", Объект.Организация);
		УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
		
	КонецЕсли;

	ЗаполнитьДеревоЗначенийСвойств();
	ВосстановитьФлажкиДерева();
	
	УстановитьОтборПрикрепленныхФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравНаДокумент(Отказ) 
	
	ТекущийПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	КонтролируемоеПраво = ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПросматриватьЗаданияДругихПользователей;
	Если (НЕ Объект.Ссылка.Пустая())
		И (НЕ УправлениеСпискомПользователейПолныеПрава.ПолучитьЗначениеПраваДляТекущегоПользователя(КонтролируемоеПраво)) Тогда
		
		Если ((ТекущийПользователь <> Объект.Сотрудник.Пользователь)
			и (ТекущийПользователь <> Объект.Куратор.Пользователь)
			и (Не РольДоступна("Клиент"))) 
			или (РольДоступна("Клиент") и ТекущийПользователь.Контрагент <> Объект.Контрагент) Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Вам запрещено просматривать документы других пользователей! ";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли;	
		
		Если РольДоступна("Клиент") и ТекущийПользователь.Контрагент.Пустая() Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнены основные параметры пользователя, создание задач не доступно!";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
//Процедура устанавливает отбор прикрепленных файлов до текущего объекта
//
Процедура УстановитьОтборПрикрепленныхФайлов()
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ПрикрепленныеФайлы.Доступность = Ложь;
		Возврат;
	ИначеЕсли НЕ Элементы.ПрикрепленныеФайлы.Доступность Тогда
		Элементы.ПрикрепленныеФайлы.Доступность = Истина;
	КонецЕсли;	
	
	ЭлементОтбора = ХранимыеФайлы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектДанных");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры	

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыОпций = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыОпций = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	
	УстановитьОтборПрикрепленныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначенийСвойств()
	
	Дерево = УправлениеДаннымиСервер.ЗаполнитьДеревоЗначенийСвойств(Объект.Контрагент);
	ЭтаФорма.ЗначениеВРеквизитФормы(Дерево, "ДеревоПодразделений");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбъектыОбслуживания(Команда)
	
	Если (Объект.ОбъектыОбслуживания.Количество() > 0) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОтветПользователя = Вопрос("Отмеченные объекты будут очищены, продолжить?",Режим);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Объект.ОбъектыОбслуживания.Очистить();
	ЗаполнитьДеревоЗначенийСвойств();
	УправлениеСвойствамиКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоПодразделений,ДеревоПодразделений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОбслуживанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОбслуживанияОчистка(Элемент, СтандартнаяОбработка)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ТиповыеРешенияПриИзменении(Элемент)
	
	Объект.КоличествоЧасовЗатрачено = Объект.ТиповыеРешения.Итог("КоличествоЧасовЗатрачено");
	ПересчетСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает ссылку на текущую строку в списке решений 
// 
// Параметры: 
//  Нет. 
// 
// Возвращаемое значение: 
//  
Функция ПолучитьТекущуюСтрокуРешений()
	Возврат Элементы.ТиповыеРешения.ТекущиеДанные;
КонецФункции

&НаКлиенте
Процедура КвоЧасовЗатраченоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ПолучитьТекущуюСтрокуРешений();
	
	ПараметрыВремени = Новый Структура("КвоМинут",ТекущиеДанные.КоличествоЧасовЗатрачено*60);
	Результат = ОткрытьФормуМодально("Обработка.КалькуляторВремени.Форма",ПараметрыВремени);
	
	Если НЕ Результат = Неопределено Тогда
		ТекущиеДанные.КоличествоЧасовЗатрачено = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗначениямиПоОбъектуОбслуживания(ОбъектОбслуживания,МассивЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОбъектыОбслуживанияШаблоны.ТиповыеРешения
	|ИЗ
	|	Справочник.ОбъектыОбслуживания.Шаблоны КАК ОбъектыОбслуживанияШаблоны
	|ГДЕ
	|	ОбъектыОбслуживанияШаблоны.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",ОбъектОбслуживания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		НайденноеЗначение = МассивЗаполнения.Найти(Выборка.ТиповыеРешения);
		Если НайденноеЗначение = Неопределено Тогда
			МассивЗаполнения.Добавить(Выборка.ТиповыеРешения);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
//Процедура ищет в коллекции значений дерева обслуживаемых объектов данные по переданным параметрам
//
Процедура ОбходСтрокКоллекцийДерева(Строки,Команда,ЗначениеПоиска=Неопределено,ПрочиеДанные=Неопределено)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если (Команда = "СохранитьОбъектыОбслуживания") Тогда
			
			НоваяСтрокаОбъекта = Объект.ОбъектыОбслуживания.Добавить();
			НоваяСтрокаОбъекта.Пометка = СтрокаДерева.Пометка;
			НоваяСтрокаОбъекта.ОбъектОбслуживания = СтрокаДерева.ОбъектОбслуживания;
			НоваяСтрокаОбъекта.Подразделение = СтрокаДерева.Владелец;
			
		ИначеЕсли (Команда = "ВосстановитьФлажкиДерева") 
			И (СтрокаДерева.ОбъектОбслуживания = ЗначениеПоиска) 
			И (СтрокаДерева.Владелец = ПрочиеДанные.Подразделение) Тогда	
			
			СтрокаДерева.Пометка = ПрочиеДанные.Пометка;
			
		ИначеЕсли (Команда = "ЗаполнитьТиповыеРешенияПоОбъктахОбслуживания") 
			и (СтрокаДерева.Пометка)
			и (ТипЗнч(СтрокаДерева.ОбъектОбслуживания)=Тип("СправочникСсылка.ОбъектыОбслуживания")) Тогда
			
			//необходимо накопить список по типовых решениях
			ЗаполнитьСписокЗначениямиПоОбъектуОбслуживания(СтрокаДерева.ОбъектОбслуживания,ПрочиеДанные);
			
		КонецЕсли;	 
		
		ОбходСтрокКоллекцийДерева(СтрокаДерева.Строки,Команда,ЗначениеПоиска,ПрочиеДанные);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
//При записи документа сохраняет дерево в табличную часть
//
Процедура СохранитьОбъектыОбслуживания()
	
	ДеревоКакОбъект = ДанныеФормыВЗначение(ДеревоПодразделений,Тип("ДеревоЗначений"));
	ОбходСтрокКоллекцийДерева(ДеревоКакОбъект.Строки,"СохранитьОбъектыОбслуживания");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьФлажкиДерева()
	
	ДеревоКакОбъект = ДанныеФормыВЗначение(ДеревоПодразделений,Тип("ДеревоЗначений"));
	
	Для Каждого СтрокаОбъектаОбслуживания Из Объект.ОбъектыОбслуживания Цикл
		
		ИндекснаяСтрока = Неопределено;
		Если ЗначениеЗаполнено(СтрокаОбъектаОбслуживания.ОбъектОбслуживания) Тогда
			ИндекснаяСтрока = СтрокаОбъектаОбслуживания.ОбъектОбслуживания;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОбъектаОбслуживания.Подразделение) Тогда	
			ИндекснаяСтрока = СтрокаОбъектаОбслуживания.Подразделение;
		КонецЕсли;	
		
		Если ИндекснаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВерхнийУровеньКоллекции = ДеревоКакОбъект.Строки;
		ОбходСтрокКоллекцийДерева(ВерхнийУровеньКоллекции,"ВосстановитьФлажкиДерева",ИндекснаяСтрока,СтрокаОбъектаОбслуживания);
		
	КонецЦикла;	

	ЗначениеВДанныеФормы(ДеревоКакОбъект,ДеревоПодразделений);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//анализ дерева объектов обслуживания и запись их в служебные таблицы
	Объект.ОбъектыОбслуживания.Очистить();
	СохранитьОбъектыОбслуживания();
	
	Объект.Выгружен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мКонтрагент = Объект.Контрагент;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если (мКонтрагент <> Объект.Контрагент) и (ЗначениеЗаполнено(мКонтрагент)) и (Объект.ОбъектыОбслуживания.Количество() > 0) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОтветПользователя = Вопрос("Изменен контрагент, будут изменены объекты обслуживания. Продолжить?",Режим);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Объект.Контрагент = мКонтрагент;
			Возврат;
		КонецЕсли;
		
		Объект.ОбъектыОбслуживания.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьДеревоЗначенийСвойств();
    УправлениеСвойствамиКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоПодразделений,ДеревоПодразделений);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТиповыеРешенияПоОбъктахОбслуживания()
	
	СписокВыбора = Новый Массив();
	
	ДеревоКакОбъект = ДанныеФормыВЗначение(ДеревоПодразделений,Тип("ДеревоЗначений"));
	ОбходСтрокКоллекцийДерева(ДеревоКакОбъект.Строки,"ЗаполнитьТиповыеРешенияПоОбъктахОбслуживания",,СписокВыбора);
	
	Возврат СписокВыбора;
КонецФункции


&НаКлиенте
Процедура ТиповыеРешенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	МассивТиповыхРешенийОбъектовОбслуживания = ЗаполнитьТиповыеРешенияПоОбъктахОбслуживания();
	Элемент.ПодчиненныеЭлементы.КолонкиТЧТиповыеРешения.ПодчиненныеЭлементы.ТиповоеРешение.СписокВыбора.ЗагрузитьЗначения(МассивТиповыхРешенийОбъектовОбслуживания);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповоеРешениеОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ПолучитьТекущуюСтрокуРешений();
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТиповоеРешение) Тогда
		Предупреждение("Сначала надо выбрать элемент!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Функция формирует массив описаний передаваемых файлов по выделенным строкам списка
Функция ОписаниеВыделенныхФайлов()
	
	ПередаваемыеФайлы = Новый Массив;
	Для каждого Строка Из Элементы.ХранимыеФайлы.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ХранимыеФайлы.ДанныеСтроки(Строка);
		Ссылка = ПолучитьНавигационнуюСсылку(Строка, "ДанныеФайла");
		ПутьКфайлу = ДанныеСтроки.Код + "\" + ДанныеСтроки.ИмяФайла;
		Описание = Новый ОписаниеПередаваемогоФайла(ПутьКфайлу, Ссылка);
		ПередаваемыеФайлы.Добавить(Описание);
		
	КонецЦикла;
	
	Возврат ПередаваемыеФайлы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение("Для начала необходимо записать документ!");
		Возврат;
	КонецЕсли;	
	
	ПередаваемыеФайлы = ОписаниеВыделенныхФайлов();
	Если ПередаваемыеФайлы.Количество() > 0 Тогда
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			Каталог = РаботаСХранилищемОбщихНастроек.ПолучитьРабочийКаталог();
			//определить существование каталога, а то могут удалить преждее место нахождение его
			КаталогНаДиске = Новый Файл(Каталог);
			
			Если Каталог = Неопределено ИЛИ Каталог = "" ИЛИ Не КаталогНаДиске.Существует() Тогда
				
				#Если ВебКлиент Тогда
					Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
					Диалог.Заголовок = НСтр("ru = 'Выбор каталога временного хранения файлов'", "ru");
					Если Диалог.Выбрать() = Ложь Тогда
						Возврат;
					КонецЕсли;
					Каталог = Диалог.Каталог;
				#Иначе
					РаботаСХранилищемОбщихНастроек.СохранитьРабочийКаталог(КаталогВременныхФайлов());
				#КонецЕсли

			КонецЕсли;
			
			ПереданныеФайлы = Новый Массив;
			Если ПолучитьФайлы(ПередаваемыеФайлы, ПереданныеФайлы, Каталог, Ложь) Тогда
				
				Для каждого Описание Из ПереданныеФайлы Цикл
					ЗапуститьПриложение(Описание.Имя);
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Для каждого Описание Из ПередаваемыеФайлы Цикл
				ПолучитьФайл(Описание.Хранение, Описание.Имя);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлы(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Предупреждение("Для начала необходимо записать документ!");
		Возврат;
	КонецЕсли;	
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
	
		Форма = ПолучитьФорму("Справочник.ХранимыеФайлы.Форма.ФормаЗагрузкиФайлов");
		Форма.ОбъектДанных = Объект.Ссылка;
		
		Если Форма.ОткрытьМодально() = Истина Тогда
			РаботаСХранилищемОбщихНастроек.СоздатьЭлементыСправочника(Форма.СписокЗагруженныхФайлов, Объект.Ссылка);
			Элементы.ХранимыеФайлы.Обновить();
		КонецЕсли;
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Данная возможность недоступна, так как не подключено расширение работы с файлами.'", "ru"));
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Объект.Выгружен = Ложь;
	
		
	
КонецПроцедуры

