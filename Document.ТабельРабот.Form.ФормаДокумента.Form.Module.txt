&НаКлиенте
Перем мОрганизация;

&НаСервере
//Процедура заполняет текущие задания программистов по которым отображены расчеты
//
Процедура ЗаполнитьТаблицуУслуг()
	
	Объект.Услуги.Очистить();
	
	//Сбор остатков
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасчетПоЗадачамОстатки.ДокументРасчета,
	|	РасчетПоЗадачамОстатки.СуммаОстаток КАК Сумма,
	|	РасчетПоЗадачамОстатки.КвоЧасовОстаток КАК КоличествоЧасовЗатрачено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалютНачала.Курс, 0) = 0
	|				ИЛИ КурсыВалютНачала.Курс = 0
	|				ИЛИ ЕСТЬNULL(КурсыВалютНачала.Кратность, 0) = 0
	|				ИЛИ КурсыВалютНачала.Кратность = 0
	|				ИЛИ ЕСТЬNULL(КурсыВалютКонца.Курс, 0) = 0
	|				ИЛИ КурсыВалютКонца.Курс = 0
	|				ИЛИ ЕСТЬNULL(КурсыВалютКонца.Кратность, 0) = 0
	|				ИЛИ КурсыВалютКонца.Кратность = 0
	|			ТОГДА 0
	|		ИНАЧЕ РасчетПоЗадачамОстатки.ДокументРасчета.ЦенаЧаса * КурсыВалютНачала.Курс * КурсыВалютКонца.Кратность / (КурсыВалютКонца.Курс * КурсыВалютНачала.Кратность)
	|	КОНЕЦ КАК ЦенаЧаса,
	|	РасчетПоЗадачамОстатки.ДокументРасчета.ДатаСдачиРабот КАК ДокументРасчетаДатаСдачиРабот
	|ИЗ
	|	РегистрНакопления.РасчетПоЗадачам.Остатки(
	|			&МоментВремени,
	|			Контрагент = &Контрагент
	|				И Организация = &Организация) КАК РасчетПоЗадачамОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКонца
	|		ПО РасчетПоЗадачамОстатки.Организация.ОсновнаяВалютаВзаиморасчетов = КурсыВалютКонца.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютНачала
	|		ПО РасчетПоЗадачамОстатки.ДокументРасчета.ВалютаДокумента = КурсыВалютНачала.Валюта
	|ГДЕ
	|	РасчетПоЗадачамОстатки.ДокументРасчета.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеЗаданий.Завершено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументРасчетаДатаСдачиРабот");

	Граница = ?(Объект.Проведен,Объект.Ссылка.МоментВремени(), Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("МоментВремени",Граница);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Объект.Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьДокументыРасчетов(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОтветПользователя = Вопрос("Табличная часть будет очищена, продолжить?",Режим);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗаполнитьТаблицуУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.ВалютаВзаиморасчетов 	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыОрганизации(Объект.Организация,"ОсновнаяВалютаВзаиморасчетов");
	Объект.КурсВзаиморасчетов		= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КурсВзаиморасчетов");
	Объект.КратностьВзаиморасчетов	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КратностьВзаиморасчетов");
	
	Если (мОрганизация <> Объект.Организация) и (ЗначениеЗаполнено(мОрганизация)) Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОтветПользователя = Вопрос("Изменена организация, изменить табличную часть?",Режим);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Объект.Организация = мОрганизация;
			Возврат;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Объект.Номер) Тогда
			Объект.Номер = "";
		КонецЕсли;

		ЗаполнитьТаблицуУслуг();
	КонецЕсли;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьРеквизитДокументаРасчета(ДокументРасчета,ИмяРеквизита)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РегламентноеЗадание.Ссылка,
	|	РегламентноеЗадание.ПометкаУдаления,
	|	РегламентноеЗадание.Номер,
	|	РегламентноеЗадание.Дата,
	|	РегламентноеЗадание.Проведен,
	|	РегламентноеЗадание.Организация,
	|	РегламентноеЗадание.Контрагент,
	|	РегламентноеЗадание.Куратор,
	|	РегламентноеЗадание.Сотрудник,
	|	РегламентноеЗадание.ТемаСобытия,
	|	РегламентноеЗадание.ВидРасчета,
	|	РегламентноеЗадание.ВалютаДокумента,
	|	РегламентноеЗадание.Кратность,
	|	РегламентноеЗадание.Курс,
	|	РегламентноеЗадание.ВалютаВзаиморасчетов,
	|	РегламентноеЗадание.КурсВзаиморасчетов,
	|	РегламентноеЗадание.КратностьВзаиморасчетов,
	|	РегламентноеЗадание.КоличествоЧасовЗатрачено,
	|	РегламентноеЗадание.ЦенаЧаса,
	|	РегламентноеЗадание.КоличествоЧасовПланово,
	|	РегламентноеЗадание.ДатаСдачиРабот,
	|	РегламентноеЗадание.Состояние,
	|	РегламентноеЗадание.Важность,
	|	РегламентноеЗадание.ОписаниеЗадания,
	|	РегламентноеЗадание.ОписаниеРешения,
	|	РегламентноеЗадание.СуммаДокумента,
	|	РегламентноеЗадание.АналитическийПризнак,
	|	РегламентноеЗадание.ДатаСдачиПланово
	|ИЗ
	|	Документ.РегламентноеЗадание КАК РегламентноеЗадание
	|ГДЕ
	|	РегламентноеЗадание.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",ДокументРасчета);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Возврат Шапка[ИмяРеквизита];
	
КонецФункции //ПолучитьРеквизитДокументаРасчета(ДокументРасчета,ИмяРеквизита)	

&НаКлиенте
// Функция возвращает ссылку на текущую строку в списке услуг 
// 
// Параметры: 
//  Нет. 
// 
// Возвращаемое значение: 
//  
Функция ПолучитьТекущуюСтрокуУслуг()
	Возврат Элементы.Услуги.ТекущиеДанные;
КонецФункции

&НаКлиенте
Процедура УслугиДокументРасчетаПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = ПолучитьТекущуюСтрокуУслуг();
	ТекущиеДанныеСтроки.КоличествоЧасовЗатрачено = ПолучитьРеквизитДокументаРасчета(ТекущиеДанныеСтроки.ДокументРасчета,"КоличествоЧасовЗатрачено");
	
	ПересчетСуммыПоСтрокеДанных(ТекущиеДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетСуммыПоСтрокеДанных(ТекущиеДанныеСтроки)
	
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСтроки.Сумма = ТекущиеДанныеСтроки.КоличествоЧасовЗатрачено * ТекущиеДанныеСтроки.ЦенаЧаса;
	
	//СуммаВВалюте = (ТекущиеДанныеСтроки.КоличествоЧасовЗатрачено +  ТекущиеДанныеСтроки.КоличествоЧасовДополнительно) * ПолучитьРеквизитДокументаРасчета(ТекущиеДанныеСтроки.ДокументРасчета,"ЦенаЧаса");
	//ВалютаДокумента = ПолучитьРеквизитДокументаРасчета(ТекущиеДанныеСтроки.ДокументРасчета,"ВалютаДокумента");
	//Курс = ПолучитьРеквизитДокументаРасчета(ТекущиеДанныеСтроки.ДокументРасчета,"Курс");
	//Кратность = ПолучитьРеквизитДокументаРасчета(ТекущиеДанныеСтроки.ДокументРасчета,"Кратность");
	
	//ТекущиеДанныеСтроки.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаВВалюте,ВалютаДокумента,Объект.ВалютаВзаиморасчетов,
	//								Курс,Объект.КурсВзаиморасчетов,Кратность,Объект.КратностьВзаиморасчетов);
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиКоличествоЧасовЗатраченоПриИзменении(Элемент)
	
	ПересчетСуммыПоСтрокеДанных(ПолучитьТекущуюСтрокуУслуг());
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ОбходИЗаполнениеСумм(ПараметрыРасчета)
	
	Для Каждого СтрокаУслуги Из Объект.Услуги Цикл
		
		СуммаДляРасчета = СтрокаУслуги.КоличествоЧасовЗатрачено*ПараметрыРасчета.Получить("ЦенаЧаса");
		Валюта 	  = ПараметрыРасчета.Получить("Валюта");
		Курс   	  = ПараметрыРасчета.Получить("Курс");
		Кратность = ПараметрыРасчета.Получить("Кратность");
		
		СтрокаУслуги.ЦенаЧаса = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ПараметрыРасчета.Получить("ЦенаЧаса"),Валюта,Объект.ВалютаВзаиморасчетов,
									Курс,Объект.КурсВзаиморасчетов,Кратность,Объект.КратностьВзаиморасчетов);
		СтрокаУслуги.Сумма	  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДляРасчета,Валюта,Объект.ВалютаВзаиморасчетов,
									Курс,Объект.КурсВзаиморасчетов,Кратность,Объект.КратностьВзаиморасчетов);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСуммуПоЦенеЧаса(Команда)
	
	ПараметрыФормыДляПодстановки = Новый Структура();
	ПараметрыФормыДляПодстановки.Вставить("ВалютаВзаиморасчетов",Объект.ВалютаВзаиморасчетов);
	ПараметрыФормыДляПодстановки.Вставить("КратностьВзаиморасчетов",Объект.КратностьВзаиморасчетов);
	ПараметрыФормыДляПодстановки.Вставить("КурсВзаиморасчетов",Объект.КурсВзаиморасчетов);
	ПараметрыФормыДляПодстановки.Вставить("ДатаРасчета",Объект.Дата);
	РезультатРасчета = ОткрытьФормуМодально("Обработка.ЗаполнитьСуммыЛУРВ.Форма",ПараметрыФормыДляПодстановки);
	
	Если НЕ РезультатРасчета = Неопределено Тогда
		ОбходИЗаполнениеСумм(РезультатРасчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() и Объект.Организация.Пустая() Тогда
		
		Объект.Организация = ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновнуюОрганизациюПоТекущемуПользователю();
		
		Объект.ВалютаВзаиморасчетов 	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыОрганизации(Объект.Организация,"ОсновнаяВалютаВзаиморасчетов");
		Объект.КурсВзаиморасчетов		= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КурсВзаиморасчетов");
		Объект.КратностьВзаиморасчетов	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Объект.Дата,Объект.ВалютаВзаиморасчетов,"КратностьВзаиморасчетов");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаЧасаПриИзменении(Элемент)
	
	ПересчетСуммыПоСтрокеДанных(ПолучитьТекущуюСтрокуУслуг());
	
КонецПроцедуры
