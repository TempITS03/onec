

//Процедура заполняет текущие задания программистов по которым отображены расчеты
//
Процедура ЗаполнитьТаблицуУслуг(РегламентноеЗадание = Неопределено) Экспорт
	
	Услуги.Очистить();
	
	//Сбор остатков
	Запрос = Новый Запрос();
	//ТекстЗапроса = "ВЫБРАТЬ
	//|	РасчетПоЗадачамОстатки.ДокументРасчета,
	//|	РасчетПоЗадачамОстатки.СуммаОстаток КАК Сумма,
	//|	РасчетПоЗадачамОстатки.КвоЧасовОстаток КАК КоличествоЧасовЗатрачено
	//|ИЗ
	//|	РегистрНакопления.РасчетПоЗадачам.Остатки(
	//|			,
	//|			Контрагент = &Контрагент
	//|				И Организация = &Организация
	//|//%УСЛОВИЕ_ДокументРасчета% ) КАК РасчетПоЗадачамОстатки";

	//Сбор остатков
	ТекстЗапроса = "ВЫБРАТЬ
	                      |	РасчетПоЗадачамОстатки.ДокументРасчета,
	                      |	РасчетПоЗадачамОстатки.СуммаОстаток КАК Сумма,
	                      |	РасчетПоЗадачамОстатки.КвоЧасовОстаток КАК КоличествоЧасовЗатрачено,
	                      |	ВЫБОР
	                      |		КОГДА ЕСТЬNULL(КурсыВалютНачала.Курс, 0) = 0
	                      |				ИЛИ КурсыВалютНачала.Курс = 0
	                      |				ИЛИ ЕСТЬNULL(КурсыВалютНачала.Кратность, 0) = 0
	                      |				ИЛИ КурсыВалютНачала.Кратность = 0
	                      |				ИЛИ ЕСТЬNULL(КурсыВалютКонца.Курс, 0) = 0
	                      |				ИЛИ КурсыВалютКонца.Курс = 0
	                      |				ИЛИ ЕСТЬNULL(КурсыВалютКонца.Кратность, 0) = 0
	                      |				ИЛИ КурсыВалютКонца.Кратность = 0
	                      |			ТОГДА 0
	                      |		ИНАЧЕ РасчетПоЗадачамОстатки.ДокументРасчета.ЦенаЧаса * КурсыВалютНачала.Курс * КурсыВалютКонца.Кратность / (КурсыВалютКонца.Курс * КурсыВалютНачала.Кратность)
	                      |	КОНЕЦ КАК ЦенаЧаса
	                      |ИЗ
	                      |	РегистрНакопления.РасчетПоЗадачам.Остатки(
	                      |			,
	                      |			Контрагент = &Контрагент
	                      |				И Организация = &Организация
						  |				//%УСЛОВИЕ_ДокументРасчета% ) КАК РасчетПоЗадачамОстатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыВалютКонца
	                      |		ПО РасчетПоЗадачамОстатки.Организация.ОсновнаяВалютаВзаиморасчетов = КурсыВалютКонца.Валюта
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыВалютНачала
	                      |		ПО РасчетПоЗадачамОстатки.ДокументРасчета.ВалютаДокумента = КурсыВалютНачала.Валюта
	                      |ГДЕ
	                      |	РасчетПоЗадачамОстатки.ДокументРасчета.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеЗаданий.Завершено)";
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДокументРасчета",РегламентноеЗадание);
	
	Если НЕ РегламентноеЗадание = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//%УСЛОВИЕ_ДокументРасчета%","И ДокументРасчета = &ДокументРасчета");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Услуги.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

//Заполнить шапку документа по документу основание
//
Процедура ЗаполнитьШапку(ДанныеЗаполнения) Экспорт
	
	Организация = ДанныеЗаполнения.Организация;
	Контрагент  = ДанныеЗаполнения.Контрагент;
	
	ВалютаВзаиморасчетов 	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыОрганизации(Организация,"ОсновнаяВалютаВзаиморасчетов");
	КурсВзаиморасчетов		= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Дата,ВалютаВзаиморасчетов,"КурсВзаиморасчетов");
	КратностьВзаиморасчетов	= ЗаполнениеОсновныхПараметровДокументов.ПолучитьОсновныеПараметрыВалюты(Дата,ВалютаВзаиморасчетов,"КратностьВзаиморасчетов");
	
КонецПроцедуры	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РегламентноеЗадание") Тогда

		ЗаполнитьШапку(ДанныеЗаполнения);
		ЗаполнитьТаблицуУслуг(ДанныеЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения) 
	
	СтруктураШапкиДокумента = Новый Структура();
	СтруктураШапкиДокумента.Вставить("Организация",Организация);
	СтруктураШапкиДокумента.Вставить("ДокументСсылка",Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата",Дата);
	СтруктураШапкиДокумента.Вставить("Контрагент",Контрагент);
	
	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Движения.РасчетПоЗадачам.КонтрольОстатков(ЭтотОбъект, "Услуги", СтруктураШапкиДокумента, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// Создание движения в регистре накопления  ВзаиморасчетыСКонтрагентами
		Движения.ВзаиморасчетыСКонтрагентами.Записывать = Услуги.Итог("Сумма")<>0;
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;
		Движение.Организация 	= Организация;
		Движение.Контрагент		= Контрагент;
		Движение.Валюта 		= ВалютаВзаиморасчетов;
		Движение.Сумма			= Услуги.Итог("Сумма");
		
		
		//Сбор остатков
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РасчетПоЗадачамОстатки.Организация,
		|	РасчетПоЗадачамОстатки.Контрагент,
		|	РасчетПоЗадачамОстатки.ДокументРасчета,
		|	РасчетПоЗадачамОстатки.СуммаОстаток КАК Сумма,
		|	РасчетПоЗадачамОстатки.КвоЧасовОстаток КАК КвоЧасов
		|ИЗ
		|	РегистрНакопления.РасчетПоЗадачам.Остатки(
		|			&МоментВремени,
		|			ДокументРасчета В
		|					(ВЫБРАТЬ
		|						Табель.ДокументРасчета
		|					ИЗ
		|						Документ.ТабельРабот.Услуги КАК Табель
		|					ГДЕ
		|						Табель.Ссылка = &Ссылка)
		|				И Контрагент = &Контрагент
		|				И Организация = &Организация) КАК РасчетПоЗадачамОстатки
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрНакопления.РасчетПоЗадачам.Остатки");
		
		Запрос.УстановитьПараметр("МоментВремени",Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Результат.Колонки.Добавить("Период");
		Результат.Колонки.Добавить("ВидДвижения");
		Результат.Колонки.Добавить("Валюта");
		
		Результат.ЗаполнитьЗначения(Дата,"Период");
		Результат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		Результат.ЗаполнитьЗначения(ВалютаВзаиморасчетов,"Валюта");
		
		// Создание движения в регистре накопления  РасчетПоЗадачам
		//закрываем задачи по остатку
		Движения.РасчетПоЗадачам.Записывать = Истина;
		Движения.РасчетПоЗадачам.Загрузить(Результат);
		
	КонецЕсли;
	
КонецПроцедуры	