
//Получить верхний уровень группы переданной ссылки справочника
//
Функция ПолучитьВерхнийУровеньГруппы (ГруппаИерархии, МассивРодителя,ВерхняяГруппа=Неопределено) Экспорт

	Если ГруппаИерархии.Уровень() <> 0 Тогда
		
		МассивРодителя.Добавить(ГруппаИерархии.Родитель);
		ВерхняяГруппа = ПолучитьВерхнийУровеньГруппы(ГруппаИерархии.Родитель,МассивРодителя);
		
		Если ВерхняяГруппа.Уровень() = 0 Тогда
		
			Возврат ВерхняяГруппа;
		
		КонецЕсли; 
		
	Иначе
		
		Возврат ГруппаИерархии;
		
	КонецЕсли;	
	
КонецФункции

//Записывает дерево иерархии реквизита "Родитель"
//
Процедура ЗаписатьДанныеИерархии(ЗаписьXML,ЭлеменСправочника)
	
	МассивРодителя = Новый Массив;
	ПолучитьВерхнийУровеньГруппы (ЭлеменСправочника, МассивРодителя);

	Для А = 0 По МассивРодителя.ВГраница() Цикл
		ЗаписатьXML(ЗаписьXML,МассивРодителя[А].ПолучитьОбъект());
	КонецЦикла;	
	
КонецПроцедуры	

//Проверяет для текущего узла установленные фильтра с объектом обмена
//
Процедура ПроверитьИспользованиеФильтраДляУзла(ДокументОбъект,Отказ)
	
	Если (Тип("ДокументОбъект.РегламентноеЗадание") = ТипЗнч(ДокументОбъект))
		или (Тип("ДокументСсылка.РегламентноеЗадание") = ТипЗнч(ДокументОбъект)) Тогда
		
		Если Ссылка.ПараметрФильтра = Перечисления.УсловиеОбмена.Исполнитель
			И ДокументОбъект.Сотрудник <> Ссылка.ЗначениеФильтра Тогда
			Отказ = Истина;
		ИначеЕсли Ссылка.ПараметрФильтра = Перечисления.УсловиеОбмена.Куратор
			И ДокументОбъект.Куратор <> Ссылка.ЗначениеФильтра Тогда	
			Отказ = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

//для документа обмена "РегламентноеЗадание", необходимо сделать обмен и реквизитов, которые имеют ссылкит на справочники или регистры 
//
Процедура ЗаписатьЗначенияРеквизитовВФайл(ДокументОбъект,ЗаписьXML)
	
	Если НЕ ДокументОбъект.Организация.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.Организация);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.Организация.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.Контрагент.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.Контрагент);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.Контрагент.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.Куратор.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.Куратор);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.Куратор.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.Сотрудник.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.Сотрудник);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.Сотрудник.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ВалютаВзаиморасчетов.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.ВалютаВзаиморасчетов);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.ВалютаВзаиморасчетов.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ВалютаДокумента.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.ВалютаДокумента);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.ВалютаДокумента.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.АналитическийПризнак.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.АналитическийПризнак);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.АналитическийПризнак.ПолучитьОбъект());
	КонецЕсли;
	
	Если НЕ ДокументОбъект.КонтактноеЛицоКонтрагента.Пустая() Тогда
		ЗаписатьДанныеИерархии(ЗаписьXML,ДокументОбъект.КонтактноеЛицоКонтрагента);
		ЗаписатьXML(ЗаписьXML,ДокументОбъект.КонтактноеЛицоКонтрагента.ПолучитьОбъект());
	КонецЕсли;
	
	//Анализ реквизитов табличных частей и запись их в файл данных
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	РегламентноеЗаданиеТиповыеРешения.ТиповоеРешение
	                      |ИЗ
	                      |	Документ.РегламентноеЗадание.ТиповыеРешения КАК РегламентноеЗаданиеТиповыеРешения
	                      |ГДЕ
	                      |	РегламентноеЗаданиеТиповыеРешения.Ссылка = &Ссылка
	                      |	И (НЕ РегламентноеЗаданиеТиповыеРешения.ТиповоеРешение = ЗНАЧЕНИЕ(Справочник.ТиповыеРешения.ПустаяСсылка))");
						  
	Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписатьДанныеИерархии(ЗаписьXML,Выборка.ТиповоеРешение);
		ЗаписатьXML(ЗаписьXML,Выборка.ТиповоеРешение.ПолучитьОбъект());
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	РегламентноеЗаданиеОбъектыОбслуживания.ОбъектОбслуживания,
	                      |	РегламентноеЗаданиеОбъектыОбслуживания.Подразделение
	                      |ИЗ
	                      |	Документ.РегламентноеЗадание.ОбъектыОбслуживания КАК РегламентноеЗаданиеОбъектыОбслуживания
	                      |ГДЕ
	                      |	РегламентноеЗаданиеОбъектыОбслуживания.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивОтбораОбъектыОбслуживания = Новый Массив;
	МассивОтбораПодразделения = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ОбъектОбслуживания.Пустая() Тогда
			ЗаписатьДанныеИерархии(ЗаписьXML,Выборка.ОбъектОбслуживания);
			ЗаписатьXML(ЗаписьXML,Выборка.ОбъектОбслуживания.ПолучитьОбъект());
			МассивОтбораОбъектыОбслуживания.Добавить(Выборка.ОбъектОбслуживания);
		КонецЕсли;
		
		Если НЕ Выборка.Подразделение.Пустая() Тогда
			ЗаписатьДанныеИерархии(ЗаписьXML,Выборка.Подразделение);
			ЗаписатьXML(ЗаписьXML,Выборка.Подразделение.ПолучитьОбъект());
			МассивОтбораПодразделения.Добавить(Выборка.Подразделение);
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	НазначениеОбъектов.Контрагент,
						  |	НазначениеОбъектов.Подразделение,
						  |	НазначениеОбъектов.ОбъектОбслуживания
						  |ИЗ
						  |	РегистрСведений.НазначениеОбъектов КАК НазначениеОбъектов
						  |ГДЕ
						  |	НазначениеОбъектов.Контрагент = &Контрагент
						  |	И НазначениеОбъектов.Подразделение В(&Подразделение)
						  |	И НазначениеОбъектов.ОбъектОбслуживания В(&ОбъектОбслуживания)");
	
	Запрос.УстановитьПараметр("Контрагент",ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Подразделение",МассивОтбораПодразделения);
	Запрос.УстановитьПараметр("ОбъектОбслуживания",МассивОтбораОбъектыОбслуживания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НазначениеОбъектов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Контрагент.Значение 				= ДокументОбъект.Контрагент;
		НаборЗаписей.Отбор.Подразделение.Значение			= Выборка.Подразделение;
		НаборЗаписей.Отбор.ОбъектОбслуживания.Значение 		= Выборка.ОбъектОбслуживания;
		НаборЗаписей.Прочитать();
		
		ЗаписатьXML(ЗаписьXML,НаборЗаписей);
			
	КонецЦикла; 
	
	//--- Прикрепленные файлы
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ХранимыеФайлы.Ссылка
						  |ИЗ
						  |	Справочник.ХранимыеФайлы КАК ХранимыеФайлы
						  |ГДЕ
						  |	ХранимыеФайлы.ОбъектДанных = &ОбъектДанных");
	Запрос.УстановитьПараметр("ОбъектДанных",ДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
				
		ЗаписатьXML(ЗаписьXML,Выборка.Ссылка.ПолучитьОбъект());
		//ЗаписатьXML(ЗаписьXML,Выборка.Ссылка.ДанныеФайла.Получить());
		
	КонецЦикла; 
	
КонецПроцедуры	

//Вызывается для обмена зарегистрированными данными или для конкретного массива документов
//
Процедура ЗаписатьСообщениеСИзменениями(МассивСсылок = Неопределено,КаталогОбмена = Неопределено) Экспорт
	
	Если КаталогОбмена = Неопределено И НЕ ЗначениеЗаполнено(Константы.КаталогОбменаДанными.Получить()) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен каталог обмена в константах!";
		Сообщение.Сообщить();
		Возврат;
	ИначеЕсли КаталогОбмена = Неопределено Тогда	
		Каталог = Константы.КаталогОбменаДанными.Получить();
	Иначе
		Каталог = КаталогОбмена;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "----- Выгрузка в узел: " + Строка(ЭтотОбъект) + " -----";
	Сообщение.Сообщить();
	
	//Сформировать имя временного файла.
	ИмяФайла = Каталог + ?(Прав(Каталог,1)="\","","\") + "Message" + СокрЛП(ПланыОбмена.ОбменЗадачами.ЭтотУзел().Код) 
				+ "_"+СокрЛП(Ссылка.Код) + ".xml";
				
	ИмяСжатогоФайла = 	Каталог + ?(Прав(Каталог,1)="\","","\") + "Message" + СокрЛП(ПланыОбмена.ОбменЗадачами.ЭтотУзел().Код) 
				+ "_"+СокрЛП(Ссылка.Код) + ".zip";
				
	// Выгрузить в файл xml. 
	ЗаписьXML=Новый ЗаписьXML(); 
	ЗаписьXML.ОткрытьФайл(ИмяФайла); 
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	//Инфраструктура сообщений
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML,Ссылка);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Номер отправленного сообщения: " + ЗаписьСообщения.НомерСообщения;
	Сообщение.Сообщить();
	
	УдалитьФайлОбмена = Истина;
	
	Если МассивСсылок = Неопределено Тогда
		//выгружаем полностью измененные данные (ручной или фоновый вызов полного обмена)
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель,ЗаписьСообщения.НомерСообщения);
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			Отказ = Ложь;
			Если Ссылка.ИспользоватьФильтрОбмена 
				И НЕ Ссылка.ЗначениеФильтра.Пустая()
				И НЕ Ссылка.ПараметрФильтра.Пустая() Тогда
				ПроверитьИспользованиеФильтраДляУзла(ВыборкаИзменений.Получить(),Отказ);
			КонецЕсли;	
			
			Если НЕ Отказ Тогда
				Если (Тип("ДокументОбъект.РегламентноеЗадание") = ТипЗнч(ВыборкаИзменений.Получить()))
					или (Тип("ДокументСсылка.РегламентноеЗадание") = ТипЗнч(ВыборкаИзменений.Получить())) Тогда
					
					ЗаписатьЗначенияРеквизитовВФайл(ВыборкаИзменений.Получить(),ЗаписьXML);
					ЗаписатьXML(ЗаписьXML,ВыборкаИзменений.Получить());
					УдалитьФайлОбмена = Ложь;
					
					ДокОбъект = ВыборкаИзменений.Получить();
					ДокОбъект.Выгружен = Истина;
					ДокОбъект.Записать();
					
				Иначе
					ЗаписатьXML(ЗаписьXML,ВыборкаИзменений.Получить());
					УдалитьФайлОбмена = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		//запишем все объекты регистрации
		Для А = 0 По МассивСсылок.ВГраница() Цикл 
			ТекСсылка = МассивСсылок[А];
			
			Отказ = Ложь;
			Если Ссылка.ИспользоватьФильтрОбмена 
				И НЕ Ссылка.ЗначениеФильтра.Пустая()
				И НЕ Ссылка.ПараметрФильтра.Пустая() Тогда
				ПроверитьИспользованиеФильтраДляУзла(ТекСсылка,Отказ);
			КонецЕсли;	
			
			Если НЕ Отказ Тогда
				Если (Тип("ДокументОбъект.РегламентноеЗадание") = ТипЗнч(ТекСсылка))
					или (Тип("ДокументСсылка.РегламентноеЗадание") = ТипЗнч(ТекСсылка)) Тогда
					
					ЗаписатьЗначенияРеквизитовВФайл(ТекСсылка.ПолучитьОбъект(),ЗаписьXML);
					ЗаписатьXML(ЗаписьXML,ТекСсылка.ПолучитьОбъект());
					УдалитьФайлОбмена = Ложь;
					
					ДокОбъект = ТекСсылка.ПолучитьОбъект();
					ДокОбъект.Выгружен = Истина;
					ДокОбъект.Записать();
					
				КонецЕсли;
			Иначе
				//проверим регистрацию объекта и удалим ее для текущего узла
				Если ПланыОбмена.ИзменениеЗарегистрировано(ЗаписьСообщения.Получатель,ТекСсылка.ПолучитьОбъект()) Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть(); 
	
	Если УдалитьФайлОбмена Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для Узла: " + Строка(Ссылка) + " не найден ни один объект обмена.";
		Сообщение.Сообщить();
		УдалитьФайлы(ИмяФайла);
	Иначе
		
		ОперацииСФайлом = ИмяФайла;
		Если Константы.СжиматьФайлОбмена.Получить() Тогда
			ОбменДаннымиСервер.АрхивироватьФайл(ИмяФайла,ИмяСжатогоФайла);
			ОперацииСФайлом = ИмяСжатогоФайла;
		КонецЕсли;	
		
		#Если НЕ ВебКлиент Тогда
		Если Константы.ИспользоватьОбменДаннымиЧерезПочту.Получить() Тогда
			ОбменДаннымиСервер.ОтправитьФайлОбменаПоПочте(ОперацииСФайлом,Ссылка.EMailПолучателей);
		КонецЕсли;	
		#КонецЕсли 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "----- Конец выгрузки -----";
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры	

//Считываются измененные данные из другой базы
//
Процедура ПрочитатьСообщениеСИзменениями(КаталогОбмена=Неопределено) Экспорт
	
	Если КаталогОбмена = Неопределено И НЕ ЗначениеЗаполнено(Константы.КаталогОбменаДанными.Получить()) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен каталог обмена в константах!";
		Сообщение.Сообщить();
		Возврат;
	ИначеЕсли КаталогОбмена = Неопределено Тогда	
		Каталог = Константы.КаталогОбменаДанными.Получить();
	Иначе
		Каталог = КаталогОбмена;
	КонецЕсли;

	#Если НЕ ВебКлиент Тогда
	Если Константы.ИспользоватьОбменДаннымиЧерезПочту.Получить() Тогда
		ОбменДаннымиСервер.ПолучитьСообщенияОбменаПоПочте(Каталог);
	КонецЕсли;
	#КонецЕсли
	
	//Сформировать имя файла.
	ИмяФайла = Каталог + ?(Прав(Каталог,1)="\","","\") + "Message" + СокрЛП(Ссылка.Код) 
				+ "_"+ СокрЛП(ПланыОбмена.ОбменЗадачами.ЭтотУзел().Код) + ".xml";
				
	ИмяСжатогоФайла = Каталог + ?(Прав(Каталог,1)="\","","\") + "Message" + СокрЛП(Ссылка.Код) 
				+ "_"+ СокрЛП(ПланыОбмена.ОбменЗадачами.ЭтотУзел().Код) + ".zip";
				
	ФайлZip = Новый Файл(ИмяСжатогоФайла);
	Если ФайлZip.Существует() Тогда
		ОбменДаннымиСервер.ИзвлечьФайлСАрхива(ИмяСжатогоФайла,Каталог);
	КонецЕсли;	
				
	//ИмяФайла = Каталог + "\MessageЦБ_Тимур_ЦБ_Хомяк.xml";
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Файл загрузки для узла: "+ Строка(Ссылка) +" не найден!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Исключение	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Невозможно открыть файл обмена данными: " + ИмяФайла;
		Сообщение.Сообщить();
		Возврат;
  	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "----- Загрузка из: " + Строка(ЭтотОбъект) + " -----";
	Сообщение.Сообщить();

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "- Считывается файл: " + ИмяФайла;
	Сообщение.Сообщить();

	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	
	//Читать заголовок сообщения обмена данными - файла XML
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	//Сообщение предназначено не для этого узла
	Если ЧтениеСообщения.Отправитель <> Ссылка Тогда ВызватьИсключение "Неверный узел"; КонецЕсли;
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Данные = ПрочитатьXML(ЧтениеXML);
		
		//Не переносим изменение, полученое в главный из неглавного,
		//если есть регистрация изменения 
		
		//Если Не ЧтениеСообщения.Отправитель.Главный И 
		//	ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
		//	
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "- Данные: " + Строка(Данные) + " были изменены в этой базе, узел которого является главным, изменения из файла отклонены!";
		//	Сообщение.Сообщить();
		//	Продолжить;
		//КонецЕсли;	
		
		Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
		
		Если ТипЗнч(Данные) = Тип("ДокументОбъект.РегламентноеЗадание") Тогда
			ОбъектПроведения = Данные.Ссылка.ПолучитьОбъект();
			ОбъектПроведения.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	//Попытка
	//	УдалитьФайлы(ИмяФайла);
	//	УдалитьФайлы(ИмяСжатогоФайла);
	//Исключение
	//КонецПопытки;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "----- Конец загрузки -----";
	Сообщение.Сообщить();
	
КонецПроцедуры	