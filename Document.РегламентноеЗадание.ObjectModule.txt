//Процедура получает срез регистра сведений по шкале ставок и подставляет данные в документ
//
Процедура СрезШкалыСтавокСотрудников() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШкалаТарифовСрезПоследних.ВидРасчета,
	|	ШкалаТарифовСрезПоследних.ВалютаРасчета,
	|	ШкалаТарифовСрезПоследних.ЦенаЧасаСумма
	|ИЗ
	|	РегистрСведений.ШкалаТарифов.СрезПоследних(&ДатаСреза, Сотрудник = &Сотрудник) КАК ШкалаТарифовСрезПоследних");
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	Запрос.УстановитьПараметр("ДатаСреза",КонецДня(Дата));
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВидРасчета = Шапка.ВидРасчета;
	ВалютаДокумента = Шапка.ВалютаРасчета;
	ЦенаЧаса = Шапка.ЦенаЧасаСумма;
	
КонецПроцедуры	

Процедура ОбработкаПроведения(Отказ, РежимПроведения) 
	
	Если (Состояние = Перечисления.СостояниеЗаданий.Завершено) и (КоличествоЧасовЗатрачено = 0) Тогда
		Отказ = Истина;
		Сообщить("Когда задача закрыта необходиму указать, количество затрат времени!",СтатусСообщения.Важное);
	ИначеЕсли (Состояние = Перечисления.СостояниеЗаданий.Завершено) и (НЕ ЗначениеЗаполнено(ДатаСдачиРабот)) Тогда
		Отказ = Истина;
		Сообщить("Когда задача закрыта необходиму указать дату полной сдачи!",СтатусСообщения.Важное);
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		
		ТекущийПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Если (ЗначениеЗаполнено(Сотрудник.Пользователь)) 
			и (ТекущийПользователь <> Сотрудник.Пользователь) 
			и (Сотрудник.Пользователь.ОповещатьПриСозданииНовогоЗадания) 
			и (НЕ ОбъектЗаписан) Тогда
			
			НаборЗаписей = РегистрыСведений.АктуальныеЗадачиДляОповещения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Сотрудник.Пользователь);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Пользователь = Сотрудник.Пользователь;
			Запись.ОписательОповещения = "ОповещатьПриСозданииНовогоЗадания";
			Запись.Значение = Ссылка;
			
			//Запишем набор записей
			НаборЗаписей.Записать();
			
			ОбъектЗаписан = Истина;
			
		КонецЕсли;

		
		// Создание движения в регистре накопления  РасчетыССотрудниками
		Движения.РасчетыССотрудниками.Записывать = КоличествоЧасовЗатрачено<>0 или ВидРасчета = Перечисления.ВидРасчета.Оклад;
		// Создание движения в регистре накопления  РасчетПоЗадачам
		Движения.РасчетПоЗадачам.Записывать = КоличествоЧасовЗатрачено<>0 или ВидРасчета = Перечисления.ВидРасчета.Оклад;
		
		Для Каждого СтрокаДанныхПоЭтапам Из ТиповыеРешения Цикл 
			
			Движение = Движения.РасчетыССотрудниками.Добавить();
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
			Движение.Период 		= СтрокаДанныхПоЭтапам.ДатаИсполнения;
			Движение.Организация 	= Организация;
			Движение.Сотрудник 		= Сотрудник;
			Движение.Валюта 		= ВалютаДокумента;
			Движение.ВидРасчета		= ВидРасчета;
			Движение.Сумма			= ЦенаЧаса*СтрокаДанныхПоЭтапам.КоличествоЧасовЗатрачено;
			Движение.КоличествоЧасов= СтрокаДанныхПоЭтапам.КоличествоЧасовЗатрачено;
			
			
			Движение = Движения.РасчетПоЗадачам.Добавить();
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
			Движение.Период 		= СтрокаДанныхПоЭтапам.ДатаИсполнения;
			Движение.Организация 	= Организация;
			Движение.Контрагент		= Контрагент;
			Движение.ДокументРасчета= Ссылка;
			Движение.Валюта			= ВалютаВзаиморасчетов;
			Движение.КвоЧасов		= СтрокаДанныхПоЭтапам.КоличествоЧасовЗатрачено;
			Движение.Сумма			= ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ЦенаЧаса*СтрокаДанныхПоЭтапам.КоличествоЧасовЗатрачено,
											ВалютаДокумента,ВалютаВзаиморасчетов,
											Курс,КурсВзаиморасчетов,Кратность,КратностьВзаиморасчетов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	